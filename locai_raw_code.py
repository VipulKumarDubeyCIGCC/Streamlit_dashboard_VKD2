# -*- coding: utf-8 -*-
"""LOCAI RAW CODE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19vo-NkseSShUv-q3Fc-rxbbuHY0nMf3y
"""

# app.py

import streamlit as st
import pandas as pd
import folium
from folium.plugins import HeatMap
from geopy.distance import geodesic
from streamlit_folium import st_folium

# Title and description
st.title("Gulf Region Heatmap Dashboard")
st.write("""
    This dashboard displays a heatmap of online order locations, existing store locations,
    and suggests new store locations based on demand.
""")

# Upload CSV files
st.sidebar.header("Upload Your CSV Files")
order_file = st.sidebar.file_uploader("Upload Order Locations CSV", type=["csv"])
store_file = st.sidebar.file_uploader("Upload Store Locations CSV", type=["csv"])

if order_file and store_file:
    # Read uploaded files
    df_orders = pd.read_csv(order_file)
    df_stores = pd.read_csv(store_file)

    # Data preview
    st.subheader("Uploaded Order Data")
    st.write(df_orders.head())

    st.subheader("Uploaded Store Data")
    st.write(df_stores.head())

    # Filtering based on country and brand
    countries = df_stores['Country'].unique()
    selected_country = st.sidebar.selectbox("Select Country", countries)

    df_stores_filtered = df_stores[df_stores['Country'] == selected_country]
    df_orders_filtered = df_orders[df_orders['Country'] == selected_country]

    # Extract brand names from 'Store Code'
    df_stores_filtered['Brand'] = df_stores_filtered['Store Code'].str.extract(r'([A-Za-z]+)')
    brands = df_stores_filtered['Brand'].unique()
    selected_brand = st.sidebar.selectbox("Select Brand", brands)

    df_stores_filtered = df_stores_filtered[df_stores_filtered['Brand'] == selected_brand]

    # Create a base map centered on the Gulf region
    gulf_region = [25.276987, 55.296249]  # Latitude and longitude for Dubai
    map_gulf = folium.Map(location=gulf_region, zoom_start=6, tiles="CartoDB positron")

    # Prepare data for heatmap
    heat_data = [
        [row['Latitude'], row['Longitude'], row['Order Count']]
        for index, row in df_orders_filtered.iterrows()
        if not pd.isnull(row['Latitude']) and not pd.isnull(row['Longitude'])
    ]

    # Add HeatMap layer
    HeatMap(heat_data, radius=15, blur=20, max_zoom=1).add_to(map_gulf)

    # Function to check if a store is within 7 km of a given order location
    def is_store_within_7km(order_lat, order_lon):
        for index, row in df_stores_filtered.iterrows():
            store_lat = row['Latitude']
            store_lon = row['Longitude']
            if geodesic((order_lat, order_lon), (store_lat, store_lon)).km <= 7:
                return True
        return False

    # Add markers for suggested new store locations
    for index, row in df_orders_filtered.iterrows():
        if row['Order Count'] > 500 and not pd.isnull(row['Latitude']) and not pd.isnull(row['Longitude']):
            if not is_store_within_7km(row['Latitude'], row['Longitude']):
                folium.Marker(
                    location=[row['Latitude'], row['Longitude']],
                    popup=f"High Demand Location - Order Count: {row['Order Count']}",
                    icon=folium.Icon(color='red', icon='info-sign')
                ).add_to(map_gulf)

    # Add store markers with store details
    for index, row in df_stores_filtered.iterrows():
        if not pd.isnull(row['Latitude']) and not pd.isnull(row['Longitude']):
            folium.Marker(
                location=[row['Latitude'], row['Longitude']],
                popup=f"Store: {row['Store Code']}",
                icon=folium.Icon(color='blue', icon='store')
            ).add_to(map_gulf)

    # Display the map
    st_folium(map_gulf, width=700, height=500)

else:
    st.write("Please upload both the Order Locations and Store Locations CSV files.")